{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport axios from 'axios';\nexport default {\n  data() {\n    return {\n      user: null\n    };\n  },\n  created() {\n    this.fetchUser();\n  },\n  methods: {\n    async fetchUser() {\n      const id = this.$route.params.id;\n      try {\n        const response = await axios.get(`https://reqres.in/api/users/${id}`);\n        this.user = response.data.data;\n      } catch (error) {\n        console.error('Failed to fetch user details:', error);\n      }\n    },\n    saveChanges() {\n      // Assuming you have form inputs to update the user's name, last name, and avatar\n      const updatedUser = {\n        id: this.user.id,\n        first_name: this.firstName,\n        // Assuming you have a data property named firstName\n        last_name: this.lastName,\n        // Assuming you have a data property named lastName\n        avatar: this.avatar // Assuming you have a data property named avatar\n      };\n\n      axios.put(`https://reqres.in/api/users/${this.user.id}`, updatedUser).then(response => {\n        const updatedUserData = response.data;\n        this.$emit('user-updated', updatedUserData);\n        // Optionally, you can emit an event to inform the parent component\n        // that the user has been updated. The parent component can then handle\n        // updating the userList.\n        this.$router.push({\n          name: 'home'\n        });\n      }).catch(error => {\n        console.error('Failed to update user:', error);\n      });\n    }\n  }\n};","map":{"version":3,"names":["axios","data","user","created","fetchUser","methods","id","$route","params","response","get","error","console","saveChanges","updatedUser","first_name","firstName","last_name","lastName","avatar","put","then","updatedUserData","$emit","$router","push","name","catch"],"sources":["C:\\Users\\User\\Desktop\\Client\\vue-starter-project\\src\\components\\Edit.vue"],"sourcesContent":["<template>\r\n    <div v-if=\"user\">\r\n      <h2>Edit User {{ user.id }}</h2>\r\n  \r\n      <form @submit.prevent=\"saveChanges\">\r\n        <!-- Form fields for editing user details -->\r\n        <div>\r\n          <label>Full Name:</label>\r\n          <input type=\"text\" v-model=\"user.first_name\" />\r\n          <input type=\"text\" v-model=\"user.last_name\" />\r\n\r\n        </div>\r\n        <div>\r\n          <label>Avatar URL:</label>\r\n          <input type=\"text\" v-model=\"user.avatar\" />\r\n        </div>\r\n  \r\n        <!-- Buttons for saving changes and deleting user -->\r\n        <div>\r\n          <button type=\"submit\">Save Changes</button>\r\n          <button @click=\"$emit('user-deleted', user.id)\">Delete User</button>\r\n        </div>\r\n      </form>\r\n    </div>\r\n  </template>\r\n  \r\n  <script>\r\n  import axios from 'axios';\r\n  \r\n  export default {\r\n    data() {\r\n      return {\r\n        user: null\r\n      };\r\n    },\r\n  \r\n    created() {\r\n      this.fetchUser();\r\n    },\r\n  \r\n    methods: {\r\n      async fetchUser() {\r\n        const id = this.$route.params.id;\r\n        try {\r\n          const response = await axios.get(`https://reqres.in/api/users/${id}`);\r\n          this.user = response.data.data;\r\n        } catch (error) {\r\n          console.error('Failed to fetch user details:', error);\r\n        }\r\n      },\r\n  \r\n      saveChanges() {\r\n      // Assuming you have form inputs to update the user's name, last name, and avatar\r\n      const updatedUser = {\r\n        id: this.user.id,\r\n        first_name: this.firstName, // Assuming you have a data property named firstName\r\n        last_name: this.lastName, // Assuming you have a data property named lastName\r\n        avatar: this.avatar, // Assuming you have a data property named avatar\r\n      };\r\n\r\n      axios\r\n        .put(`https://reqres.in/api/users/${this.user.id}`, updatedUser)\r\n        .then((response) => {\r\n          const updatedUserData = response.data;\r\n          this.$emit('user-updated', updatedUserData);\r\n          // Optionally, you can emit an event to inform the parent component\r\n          // that the user has been updated. The parent component can then handle\r\n          // updating the userList.\r\n          this.$router.push({ name: 'home' });\r\n\r\n        })\r\n        .catch((error) => {\r\n          console.error('Failed to update user:', error);\r\n        });\r\n    },\r\n    },\r\n \r\n\r\n  };\r\n  </script>\r\n  "],"mappings":";AA2BE,OAAOA,KAAI,MAAO,OAAO;AAEzB,eAAe;EACbC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,IAAI,EAAE;IACR,CAAC;EACH,CAAC;EAEDC,OAAOA,CAAA,EAAG;IACR,IAAI,CAACC,SAAS,CAAC,CAAC;EAClB,CAAC;EAEDC,OAAO,EAAE;IACP,MAAMD,SAASA,CAAA,EAAG;MAChB,MAAME,EAAC,GAAI,IAAI,CAACC,MAAM,CAACC,MAAM,CAACF,EAAE;MAChC,IAAI;QACF,MAAMG,QAAO,GAAI,MAAMT,KAAK,CAACU,GAAG,CAAE,+BAA8BJ,EAAG,EAAC,CAAC;QACrE,IAAI,CAACJ,IAAG,GAAIO,QAAQ,CAACR,IAAI,CAACA,IAAI;MAChC,EAAE,OAAOU,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,+BAA+B,EAAEA,KAAK,CAAC;MACvD;IACF,CAAC;IAEDE,WAAWA,CAAA,EAAG;MACd;MACA,MAAMC,WAAU,GAAI;QAClBR,EAAE,EAAE,IAAI,CAACJ,IAAI,CAACI,EAAE;QAChBS,UAAU,EAAE,IAAI,CAACC,SAAS;QAAE;QAC5BC,SAAS,EAAE,IAAI,CAACC,QAAQ;QAAE;QAC1BC,MAAM,EAAE,IAAI,CAACA,MAAM,CAAE;MACvB,CAAC;;MAEDnB,KAAI,CACDoB,GAAG,CAAE,+BAA8B,IAAI,CAAClB,IAAI,CAACI,EAAG,EAAC,EAAEQ,WAAW,EAC9DO,IAAI,CAAEZ,QAAQ,IAAK;QAClB,MAAMa,eAAc,GAAIb,QAAQ,CAACR,IAAI;QACrC,IAAI,CAACsB,KAAK,CAAC,cAAc,EAAED,eAAe,CAAC;QAC3C;QACA;QACA;QACA,IAAI,CAACE,OAAO,CAACC,IAAI,CAAC;UAAEC,IAAI,EAAE;QAAO,CAAC,CAAC;MAErC,CAAC,EACAC,KAAK,CAAEhB,KAAK,IAAK;QAChBC,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;MAChD,CAAC,CAAC;IACN;EACA;AAGF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}