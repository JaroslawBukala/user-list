{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { createStore } from 'vuex';\nimport axios from 'axios';\nexport default createStore({\n  state() {\n    return {\n      userList: [],\n      filteredUserList: [],\n      page: 1\n    };\n  },\n  mutations: {\n    setUserList(state, userList) {\n      state.userList = userList;\n      state.filteredUserList = userList;\n    },\n    filterUserList(state, searchQuery) {\n      if (searchQuery.trim() === '') {\n        state.filteredUserList = state.userList;\n      } else {\n        state.filteredUserList = state.userList.filter(user => {\n          const fullName = user.fullName.toLowerCase();\n          return fullName.includes(searchQuery.toLowerCase());\n        });\n      }\n    },\n    updateUser(state, updatedUser) {\n      const userIndex = state.userList.findIndex(user => user.id === updatedUser.id);\n      if (userIndex !== -1) {\n        const updatedUserCopy = {\n          ...state.userList[userIndex],\n          first_name: updatedUser.first_name,\n          last_name: updatedUser.last_name,\n          avatar: updatedUser.avatar,\n          fullName: `${updatedUser.first_name} ${updatedUser.last_name}`\n        };\n        state.userList.splice(userIndex, 1, updatedUserCopy);\n        state.filteredUserList.splice(userIndex, 1, updatedUserCopy);\n      }\n    },\n    // updateUser(state, updatedUser) {\n    //   const userIndex = state.userList.findIndex((user) => user.id === updatedUser.id);\n    //   if (userIndex !== -1) {\n    //     const updatedUserCopy = {\n    //       ...state.userList[userIndex],\n    //       id: updatedUser.id,\n    //       first_name: updatedUser.first_name,\n    //       last_name: updatedUser.last_name,\n    //       avatar: updatedUser.avatar,\n    //     };\n    //     state.userList.splice(userIndex, 1, updatedUserCopy);\n    //     state.filteredUserList.splice(userIndex, 1, updatedUserCopy);\n    //   }\n    // },\n    deleteUser(state, userId) {\n      const userIndex = state.filteredUserList.findIndex(user => user.id === userId);\n      if (userIndex !== -1) {\n        state.filteredUserList.splice(userIndex, 1);\n        state.userList.splice(userIndex, 1);\n      }\n    },\n    addUser(state, newUser) {\n      state.filteredUserList.push(newUser);\n    }\n  },\n  actions: {\n    async fetchUserList({\n      commit\n    }) {\n      try {\n        const response = await axios.get('https://reqres.in/api/users');\n        const userList = response.data.data.map(user => ({\n          id: user.id,\n          first_name: user.first_name,\n          last_name: user.last_name,\n          avatar: user.avatar,\n          fullName: `${user.first_name} ${user.last_name}`\n        }));\n        commit('setUserList', userList);\n      } catch (error) {\n        console.error('Failed to fetch user list:', error);\n      }\n    },\n    async updateUser({\n      commit\n    }, updatedUser) {\n      try {\n        // Make API request to update the user\n        // Replace `apiEndpoint` with the appropriate API endpoint for updating a user\n        // await axios.put(`https://reqres.in/api/users/${updatedUser.id}`, updatedUser);\n\n        commit('updateUser', updatedUser);\n      } catch (error) {\n        console.error('Failed to update user:', error);\n      }\n    },\n    async deleteUser({\n      commit\n    }, userId) {\n      try {\n        // Make API request to delete the user\n        // Replace `apiEndpoint` with the appropriate API endpoint for deleting a user\n        // await axios.delete(`https://reqres.in/api/users/${userId}`);\n\n        commit('deleteUser', userId);\n      } catch (error) {\n        console.error('Failed to delete user:', error);\n      }\n    },\n    async createUser({\n      commit\n    }, newUser) {\n      try {\n        // Make API request to create the user\n        // Replace `apiEndpoint` with the appropriate API endpoint for creating a user\n        // const response = await axios.post('https://reqres.in/api/users', newUser);\n        // const id = response.data.id;\n        const createdUser = {\n          id: newUser.id,\n          first_name: newUser.first_name,\n          last_name: newUser.last_name,\n          avatar: newUser.avatar,\n          fullName: `${newUser.first_name} ${newUser.last_name}`\n        };\n        commit('addUser', createdUser);\n      } catch (error) {\n        console.error('Failed to create user:', error);\n        throw error;\n      }\n    },\n    filterUserList({\n      commit,\n      state\n    }, searchQuery) {\n      commit('filterUserList', searchQuery);\n    }\n  },\n  getters: {\n    getUserById: state => id => {\n      return state.filteredUserList.find(user => user.id === id);\n    },\n    getUserList: state => {\n      return state.userList;\n    },\n    getFilteredUserList: state => {\n      return state.filteredUserList;\n    }\n  }\n});","map":{"version":3,"names":["createStore","axios","state","userList","filteredUserList","page","mutations","setUserList","filterUserList","searchQuery","trim","filter","user","fullName","toLowerCase","includes","updateUser","updatedUser","userIndex","findIndex","id","updatedUserCopy","first_name","last_name","avatar","splice","deleteUser","userId","addUser","newUser","push","actions","fetchUserList","commit","response","get","data","map","error","console","createUser","createdUser","getters","getUserById","find","getUserList","getFilteredUserList"],"sources":["C:/Users/User/Desktop/Client/vue-starter-project/src/store/index.js"],"sourcesContent":["import { createStore } from 'vuex';\nimport axios from 'axios';\n\nexport default createStore({\n  state() {\n    return {\n      userList: [],\n      filteredUserList: [],\n      page: 1\n    };\n  },\n  mutations: {\n    setUserList(state, userList) {\n      state.userList = userList;\n      state.filteredUserList = userList;\n    },\n    filterUserList(state, searchQuery) {\n      if (searchQuery.trim() === '') {\n        state.filteredUserList = state.userList;\n      }\n      else{\n        state.filteredUserList = state.userList.filter((user) => {\n          const fullName = user.fullName.toLowerCase();\n          return fullName.includes(searchQuery.toLowerCase());\n        });\n      }\n\n    },\n\n    updateUser(state, updatedUser) {\n      const userIndex = state.userList.findIndex((user) => user.id === updatedUser.id);\n      if (userIndex !== -1) {\n        const updatedUserCopy = {\n          ...state.userList[userIndex],\n          first_name: updatedUser.first_name,\n          last_name: updatedUser.last_name,\n          avatar: updatedUser.avatar,\n          fullName: `${updatedUser.first_name} ${updatedUser.last_name}`,\n        };\n        state.userList.splice(userIndex, 1, updatedUserCopy);\n        state.filteredUserList.splice(userIndex, 1, updatedUserCopy);\n      }\n    },\n    \n    \n    \n    // updateUser(state, updatedUser) {\n    //   const userIndex = state.userList.findIndex((user) => user.id === updatedUser.id);\n    //   if (userIndex !== -1) {\n    //     const updatedUserCopy = {\n    //       ...state.userList[userIndex],\n    //       id: updatedUser.id,\n    //       first_name: updatedUser.first_name,\n    //       last_name: updatedUser.last_name,\n    //       avatar: updatedUser.avatar,\n    //     };\n    //     state.userList.splice(userIndex, 1, updatedUserCopy);\n    //     state.filteredUserList.splice(userIndex, 1, updatedUserCopy);\n    //   }\n    // },\n    deleteUser(state, userId) {\n      const userIndex = state.filteredUserList.findIndex((user) => user.id === userId);\n      if (userIndex !== -1) {\n        state.filteredUserList.splice(userIndex, 1);\n        state.userList.splice(userIndex, 1);\n      }\n    },\n    \n    \n    \n    addUser(state, newUser) {\n      state.filteredUserList.push(newUser);\n\n    },\n  },\n  actions: {\n    async fetchUserList({ commit }) {\n      try {\n        const response = await axios.get('https://reqres.in/api/users');\n        const userList = response.data.data.map((user) => ({\n          id: user.id,\n          first_name: user.first_name,\n          last_name: user.last_name,\n          avatar: user.avatar,\n          fullName: `${user.first_name} ${user.last_name}`,\n        }));\n        commit('setUserList', userList);\n      } catch (error) {\n        console.error('Failed to fetch user list:', error);\n      }\n    },\n    async updateUser({ commit }, updatedUser) {\n      try {\n        // Make API request to update the user\n        // Replace `apiEndpoint` with the appropriate API endpoint for updating a user\n        // await axios.put(`https://reqres.in/api/users/${updatedUser.id}`, updatedUser);\n\n        commit('updateUser', updatedUser);\n      } catch (error) {\n        console.error('Failed to update user:', error);\n      }\n    },\n    async deleteUser({ commit }, userId) {\n      try {\n        // Make API request to delete the user\n        // Replace `apiEndpoint` with the appropriate API endpoint for deleting a user\n        // await axios.delete(`https://reqres.in/api/users/${userId}`);\n\n        commit('deleteUser', userId);\n      } catch (error) {\n        console.error('Failed to delete user:', error);\n      }\n    },\n    async createUser({ commit}, newUser) {\n      try {\n        // Make API request to create the user\n        // Replace `apiEndpoint` with the appropriate API endpoint for creating a user\n        // const response = await axios.post('https://reqres.in/api/users', newUser);\n        // const id = response.data.id;\n        const createdUser = {\n          id: newUser.id,\n          first_name: newUser.first_name,\n          last_name: newUser.last_name,\n          avatar: newUser.avatar,\n          fullName: `${newUser.first_name} ${newUser.last_name}`,\n        };\n        commit('addUser', createdUser);\n\n      } catch (error) {\n        console.error('Failed to create user:', error);\n        throw error;\n      }\n    },\n    filterUserList({ commit, state }, searchQuery) {\n      commit('filterUserList', searchQuery);\n    },\n  },\n  getters: {\n    getUserById: (state) => (id) => {\n      return state.filteredUserList.find((user) => user.id === id);\n    },\n    getUserList: (state) => {\n      return state.userList;\n    },\n    getFilteredUserList: (state) => {\n      return state.filteredUserList;\n    },\n  },\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}