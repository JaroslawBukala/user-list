{"ast":null,"code":"// store.js\nimport { createStore } from 'vuex';\nimport axios from 'axios';\nexport default createStore({\n  state: {\n    userList: [],\n    interns: []\n  },\n  mutations: {\n    setUserList(state, userList) {\n      state.userList = userList;\n    },\n    updateInterns(state, interns) {\n      state.interns = interns;\n    },\n    updateUser(state, updatedUser) {\n      const userIndex = state.userList.findIndex(user => user.id === updatedUser.id);\n      if (userIndex !== -1) {\n        const updatedUserCopy = {\n          ...state.userList[userIndex],\n          fullName: `${updatedUser.first_name} ${updatedUser.last_name}`\n        };\n        state.userList.splice(userIndex, 1, updatedUserCopy);\n      }\n    },\n    deleteUser(state, userId) {\n      const userIndex = state.userList.findIndex(user => user.id === userId);\n      if (userIndex !== -1) {\n        state.userList.splice(userIndex, 1);\n      }\n    }\n  },\n  actions: {\n    fetchUserList({\n      commit\n    }) {\n      axios.get('https://reqres.in/api/users').then(response => {\n        const userList = response.data.data.map(user => ({\n          id: user.id,\n          fullName: `${user.first_name} ${user.last_name}`,\n          avatar: user.avatar\n        }));\n        commit('setUserList', userList);\n      }).catch(error => {\n        console.error('Failed to fetch user list:', error);\n      });\n    },\n    updateUser({\n      commit\n    }, updatedUser) {\n      // You can make API requests here to update the user's data on the server\n      commit('updateUser', updatedUser);\n    },\n    deleteUser({\n      commit\n    }, userId) {\n      // You can make API requests here to delete the user from the server\n      commit('deleteUser', userId);\n    }\n  }\n});","map":{"version":3,"names":["createStore","axios","state","userList","interns","mutations","setUserList","updateInterns","updateUser","updatedUser","userIndex","findIndex","user","id","updatedUserCopy","fullName","first_name","last_name","splice","deleteUser","userId","actions","fetchUserList","commit","get","then","response","data","map","avatar","catch","error","console"],"sources":["C:/Users/User/Desktop/Client/vue-starter-project/src/store/index.js"],"sourcesContent":["// store.js\nimport { createStore } from 'vuex';\nimport axios from 'axios';\n\nexport default createStore({\n  state: {\n    userList: [],\n    interns: [],\n  },\n  mutations: {\n    setUserList(state, userList) {\n      state.userList = userList;\n    },\n    updateInterns(state, interns) {\n      state.interns = interns;\n    },\n    updateUser(state, updatedUser) {\n      const userIndex = state.userList.findIndex((user) => user.id === updatedUser.id);\n      if (userIndex !== -1) {\n        const updatedUserCopy = {\n          ...state.userList[userIndex],\n          fullName: `${updatedUser.first_name} ${updatedUser.last_name}`,\n        };\n        state.userList.splice(userIndex, 1, updatedUserCopy);\n      }\n    },\n    deleteUser(state, userId) {\n      const userIndex = state.userList.findIndex((user) => user.id === userId);\n      if (userIndex !== -1) {\n        state.userList.splice(userIndex, 1);\n      }\n    },\n  },\n  actions: {\n    fetchUserList({ commit }) {\n      axios\n        .get('https://reqres.in/api/users')\n        .then((response) => {\n          const userList = response.data.data.map((user) => ({\n            id: user.id,\n            fullName: `${user.first_name} ${user.last_name}`,\n            avatar: user.avatar,\n          }));\n          commit('setUserList', userList);\n        })\n        .catch((error) => {\n          console.error('Failed to fetch user list:', error);\n        });\n    },\n    updateUser({ commit }, updatedUser) {\n      // You can make API requests here to update the user's data on the server\n      commit('updateUser', updatedUser);\n    },\n    deleteUser({ commit }, userId) {\n      // You can make API requests here to delete the user from the server\n      commit('deleteUser', userId);\n    },\n  },\n});\n"],"mappings":"AAAA;AACA,SAASA,WAAW,QAAQ,MAAM;AAClC,OAAOC,KAAK,MAAM,OAAO;AAEzB,eAAeD,WAAW,CAAC;EACzBE,KAAK,EAAE;IACLC,QAAQ,EAAE,EAAE;IACZC,OAAO,EAAE;EACX,CAAC;EACDC,SAAS,EAAE;IACTC,WAAWA,CAACJ,KAAK,EAAEC,QAAQ,EAAE;MAC3BD,KAAK,CAACC,QAAQ,GAAGA,QAAQ;IAC3B,CAAC;IACDI,aAAaA,CAACL,KAAK,EAAEE,OAAO,EAAE;MAC5BF,KAAK,CAACE,OAAO,GAAGA,OAAO;IACzB,CAAC;IACDI,UAAUA,CAACN,KAAK,EAAEO,WAAW,EAAE;MAC7B,MAAMC,SAAS,GAAGR,KAAK,CAACC,QAAQ,CAACQ,SAAS,CAAEC,IAAI,IAAKA,IAAI,CAACC,EAAE,KAAKJ,WAAW,CAACI,EAAE,CAAC;MAChF,IAAIH,SAAS,KAAK,CAAC,CAAC,EAAE;QACpB,MAAMI,eAAe,GAAG;UACtB,GAAGZ,KAAK,CAACC,QAAQ,CAACO,SAAS,CAAC;UAC5BK,QAAQ,EAAG,GAAEN,WAAW,CAACO,UAAW,IAAGP,WAAW,CAACQ,SAAU;QAC/D,CAAC;QACDf,KAAK,CAACC,QAAQ,CAACe,MAAM,CAACR,SAAS,EAAE,CAAC,EAAEI,eAAe,CAAC;MACtD;IACF,CAAC;IACDK,UAAUA,CAACjB,KAAK,EAAEkB,MAAM,EAAE;MACxB,MAAMV,SAAS,GAAGR,KAAK,CAACC,QAAQ,CAACQ,SAAS,CAAEC,IAAI,IAAKA,IAAI,CAACC,EAAE,KAAKO,MAAM,CAAC;MACxE,IAAIV,SAAS,KAAK,CAAC,CAAC,EAAE;QACpBR,KAAK,CAACC,QAAQ,CAACe,MAAM,CAACR,SAAS,EAAE,CAAC,CAAC;MACrC;IACF;EACF,CAAC;EACDW,OAAO,EAAE;IACPC,aAAaA,CAAC;MAAEC;IAAO,CAAC,EAAE;MACxBtB,KAAK,CACFuB,GAAG,CAAC,6BAA6B,CAAC,CAClCC,IAAI,CAAEC,QAAQ,IAAK;QAClB,MAAMvB,QAAQ,GAAGuB,QAAQ,CAACC,IAAI,CAACA,IAAI,CAACC,GAAG,CAAEhB,IAAI,KAAM;UACjDC,EAAE,EAAED,IAAI,CAACC,EAAE;UACXE,QAAQ,EAAG,GAAEH,IAAI,CAACI,UAAW,IAAGJ,IAAI,CAACK,SAAU,EAAC;UAChDY,MAAM,EAAEjB,IAAI,CAACiB;QACf,CAAC,CAAC,CAAC;QACHN,MAAM,CAAC,aAAa,EAAEpB,QAAQ,CAAC;MACjC,CAAC,CAAC,CACD2B,KAAK,CAAEC,KAAK,IAAK;QAChBC,OAAO,CAACD,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;MACpD,CAAC,CAAC;IACN,CAAC;IACDvB,UAAUA,CAAC;MAAEe;IAAO,CAAC,EAAEd,WAAW,EAAE;MAClC;MACAc,MAAM,CAAC,YAAY,EAAEd,WAAW,CAAC;IACnC,CAAC;IACDU,UAAUA,CAAC;MAAEI;IAAO,CAAC,EAAEH,MAAM,EAAE;MAC7B;MACAG,MAAM,CAAC,YAAY,EAAEH,MAAM,CAAC;IAC9B;EACF;AACF,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}