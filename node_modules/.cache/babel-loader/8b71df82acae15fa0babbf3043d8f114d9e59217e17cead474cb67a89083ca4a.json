{"ast":null,"code":"// import { createStore } from 'vuex';\n// import axios from 'axios';\n\n// export default createStore({\n//   state() {\n//     return {\n//       userList: []\n//     };\n//   },\n//   mutations: {\n//     setUserList(state, userList) {\n//       state.userList = userList;\n//     },\n//     updateUser(state, updatedUser) {\n//       const userIndex = state.userList.findIndex((user) => user.id === updatedUser.id);\n//       if (userIndex !== -1) {\n//         const updatedUserCopy = {\n//           ...state.userList[userIndex],\n//           fullName: `${updatedUser.first_name} ${updatedUser.last_name}`,\n//         };\n//         state.userList.splice(userIndex, 1, updatedUserCopy);\n//       }\n//     },\n//     deleteUser(state, userId) {\n//       const userIndex = state.userList.findIndex((user) => user.id === userId);\n//       if (userIndex !== -1) {\n//         state.userList.splice(userIndex, 1);\n//       }\n//     },\n//   },\n//   actions: {\n//     fetchUserList({ commit }) {\n//       axios\n//         .get('https://reqres.in/api/users')\n//         .then((response) => {\n//           const userList = response.data.data.map((user) => ({\n//             id: user.id,\n//             fullName: `${user.first_name} ${user.last_name}`,\n//             avatar: user.avatar,\n//           }));\n//           commit('setUserList', userList);\n//         })\n//         .catch((error) => {\n//           console.error('Failed to fetch user list:', error);\n//         });\n//     },\n//     updateUser({ commit }, updatedUser) {\n//       // You can make API requests here to update the user's data on the server\n//       commit('updateUser', updatedUser);\n//     },\n//     deleteUser({ commit }, userId) {\n//       // You can make API requests here to delete the user from the server\n//       commit('deleteUser', userId);\n//     },\n//   },\n// });\nimport { createStore } from 'vuex';\nimport axios from 'axios';\nexport default createStore({\n  state() {\n    return {\n      userList: [],\n      filteredUserList: []\n    };\n  },\n  mutations: {\n    setUserList(state, userList) {\n      state.userList = userList;\n      state.filteredUserList = userList;\n    },\n    filterUserList(state, searchQuery) {\n      if (searchQuery.trim() === '') {\n        state.filteredUserList = state.userList;\n        return;\n      }\n      state.filteredUserList = state.userList.filter(user => {\n        const fullName = user.fullName.toLowerCase();\n        return fullName.includes(searchQuery.toLowerCase());\n      });\n    },\n    // store.js\n    mutations: {\n      updateUser(state, updatedUser) {\n        const userIndex = state.userList.findIndex(user => user.id === updatedUser.id);\n        if (userIndex !== -1) {\n          const updatedUserCopy = {\n            ...state.userList[userIndex],\n            fullName: `${updatedUser.first_name} ${updatedUser.last_name}`,\n            avatar: updatedUser.avatar // Update the avatar URL\n          };\n\n          state.userList.splice(userIndex, 1, updatedUserCopy);\n          state.filteredUserList.splice(userIndex, 1, updatedUserCopy);\n        }\n      }\n    },\n    deleteUser(state, userId) {\n      const userIndex = state.userList.findIndex(user => user.id === userId);\n      if (userIndex !== -1) {\n        state.userList.splice(userIndex, 1);\n        state.filteredUserList.splice(userIndex, 1);\n      }\n    }\n  },\n  actions: {\n    async fetchUserList({\n      commit\n    }) {\n      try {\n        const response = await axios.get('https://reqres.in/api/users');\n        const userList = response.data.data.map(user => ({\n          id: user.id,\n          fullName: `${user.first_name} ${user.last_name}`,\n          avatar: user.avatar\n        }));\n        commit('setUserList', userList);\n      } catch (error) {\n        console.error('Failed to fetch user list:', error);\n      }\n    },\n    async updateUser({\n      commit\n    }, updatedUser) {\n      try {\n        // Make API request to update the user\n        // Replace `apiEndpoint` with the appropriate API endpoint for updating a user\n        await axios.put(`https://reqres.in/api/users/${updatedUser.id}`, updatedUser);\n        commit('updateUser', updatedUser);\n      } catch (error) {\n        console.error('Failed to update user:', error);\n      }\n    },\n    async deleteUser({\n      commit\n    }, userId) {\n      try {\n        // Make API request to delete the user\n        // Replace `apiEndpoint` with the appropriate API endpoint for deleting a user\n        await axios.delete(`https://reqres.in/api/users/${userId}`);\n        commit('deleteUser', userId);\n      } catch (error) {\n        console.error('Failed to delete user:', error);\n      }\n    },\n    filterUserList({\n      commit,\n      state\n    }, searchQuery) {\n      commit('filterUserList', searchQuery);\n    }\n  }\n});","map":{"version":3,"names":["createStore","axios","state","userList","filteredUserList","mutations","setUserList","filterUserList","searchQuery","trim","filter","user","fullName","toLowerCase","includes","updateUser","updatedUser","userIndex","findIndex","id","updatedUserCopy","first_name","last_name","avatar","splice","deleteUser","userId","actions","fetchUserList","commit","response","get","data","map","error","console","put","delete"],"sources":["C:/Users/User/Desktop/Client/vue-starter-project/src/store/index.js"],"sourcesContent":["// import { createStore } from 'vuex';\n// import axios from 'axios';\n\n// export default createStore({\n//   state() {\n//     return {\n//       userList: []\n//     };\n//   },\n//   mutations: {\n//     setUserList(state, userList) {\n//       state.userList = userList;\n//     },\n//     updateUser(state, updatedUser) {\n//       const userIndex = state.userList.findIndex((user) => user.id === updatedUser.id);\n//       if (userIndex !== -1) {\n//         const updatedUserCopy = {\n//           ...state.userList[userIndex],\n//           fullName: `${updatedUser.first_name} ${updatedUser.last_name}`,\n//         };\n//         state.userList.splice(userIndex, 1, updatedUserCopy);\n//       }\n//     },\n//     deleteUser(state, userId) {\n//       const userIndex = state.userList.findIndex((user) => user.id === userId);\n//       if (userIndex !== -1) {\n//         state.userList.splice(userIndex, 1);\n//       }\n//     },\n//   },\n//   actions: {\n//     fetchUserList({ commit }) {\n//       axios\n//         .get('https://reqres.in/api/users')\n//         .then((response) => {\n//           const userList = response.data.data.map((user) => ({\n//             id: user.id,\n//             fullName: `${user.first_name} ${user.last_name}`,\n//             avatar: user.avatar,\n//           }));\n//           commit('setUserList', userList);\n//         })\n//         .catch((error) => {\n//           console.error('Failed to fetch user list:', error);\n//         });\n//     },\n//     updateUser({ commit }, updatedUser) {\n//       // You can make API requests here to update the user's data on the server\n//       commit('updateUser', updatedUser);\n//     },\n//     deleteUser({ commit }, userId) {\n//       // You can make API requests here to delete the user from the server\n//       commit('deleteUser', userId);\n//     },\n//   },\n// });\nimport { createStore } from 'vuex';\nimport axios from 'axios';\n\nexport default createStore({\n  state() {\n    return {\n      userList: [],\n      filteredUserList: []\n    };\n  },\n  mutations: {\n    setUserList(state, userList) {\n      state.userList = userList;\n      state.filteredUserList = userList;\n    },\n    filterUserList(state, searchQuery) {\n      if (searchQuery.trim() === '') {\n        state.filteredUserList = state.userList;\n        return;\n      }\n\n      state.filteredUserList = state.userList.filter(user => {\n        const fullName = user.fullName.toLowerCase();\n        return fullName.includes(searchQuery.toLowerCase());\n      });\n    },\n// store.js\n    mutations: {\n      updateUser(state, updatedUser) {\n        const userIndex = state.userList.findIndex(user => user.id === updatedUser.id);\n        if (userIndex !== -1) {\n          const updatedUserCopy = {\n            ...state.userList[userIndex],\n            fullName: `${updatedUser.first_name} ${updatedUser.last_name}`,\n            avatar: updatedUser.avatar  // Update the avatar URL\n          };\n          state.userList.splice(userIndex, 1, updatedUserCopy);\n          state.filteredUserList.splice(userIndex, 1, updatedUserCopy);\n        }\n      }\n    },\n\n    deleteUser(state, userId) {\n      const userIndex = state.userList.findIndex(user => user.id === userId);\n      if (userIndex !== -1) {\n        state.userList.splice(userIndex, 1);\n        state.filteredUserList.splice(userIndex, 1);\n      }\n    }\n  },\n  actions: {\n    async fetchUserList({ commit }) {\n      try {\n        const response = await axios.get('https://reqres.in/api/users');\n        const userList = response.data.data.map(user => ({\n          id: user.id,\n          fullName: `${user.first_name} ${user.last_name}`,\n          avatar: user.avatar\n        }));\n        commit('setUserList', userList);\n      } catch (error) {\n        console.error('Failed to fetch user list:', error);\n      }\n    },\n    async updateUser({ commit }, updatedUser) {\n      try {\n        // Make API request to update the user\n        // Replace `apiEndpoint` with the appropriate API endpoint for updating a user\n        await axios.put(`https://reqres.in/api/users/${updatedUser.id}`, updatedUser);\n\n        commit('updateUser', updatedUser);\n      } catch (error) {\n        console.error('Failed to update user:', error);\n      }\n    },\n    async deleteUser({ commit }, userId) {\n      try {\n        // Make API request to delete the user\n        // Replace `apiEndpoint` with the appropriate API endpoint for deleting a user\n        await axios.delete(`https://reqres.in/api/users/${userId}`);\n\n        commit('deleteUser', userId);\n      } catch (error) {\n        console.error('Failed to delete user:', error);\n      }\n    },\n    filterUserList({ commit, state }, searchQuery) {\n      commit('filterUserList', searchQuery);\n    }\n  }\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}